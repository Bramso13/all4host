
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  role: 'role',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConciergerieManagerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  conciergerieManagerId: 'conciergerieManagerId',
  agentId: 'agentId'
};

exports.Prisma.PropertyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  location: 'location',
  surface: 'surface',
  numberOfRooms: 'numberOfRooms',
  numberOfBathrooms: 'numberOfBathrooms',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  conciergerieManagerId: 'conciergerieManagerId'
};

exports.Prisma.ReservationScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  startDate: 'startDate',
  endDate: 'endDate',
  client: 'client',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  type: 'type',
  conciergerieManagerId: 'conciergerieManagerId',
  userId: 'userId',
  cleaningManagerId: 'cleaningManagerId'
};

exports.Prisma.MaintenanceSessionScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  maintenanceId: 'maintenanceId',
  agentId: 'agentId',
  startDate: 'startDate',
  endDate: 'endDate',
  notes: 'notes'
};

exports.Prisma.MaintenanceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CleaningSessionScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  cleaningId: 'cleaningId',
  agentId: 'agentId',
  startDate: 'startDate',
  endDate: 'endDate',
  duration: 'duration',
  notes: 'notes'
};

exports.Prisma.CleaningScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CleaningManagerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InterventionSiteScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  client: 'client',
  site: 'site',
  surface: 'surface',
  type: 'type',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  cleaningManagerId: 'cleaningManagerId'
};

exports.Prisma.SiteCleaningSessionScalarFieldEnum = {
  id: 'id',
  interventionSiteId: 'interventionSiteId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  cleaningManagerId: 'cleaningManagerId',
  startDate: 'startDate',
  endDate: 'endDate',
  duration: 'duration',
  notes: 'notes',
  status: 'status',
  laundryManagerId: 'laundryManagerId',
  cleaningAgentId: 'cleaningAgentId'
};

exports.Prisma.LaundryManagerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  stock: 'stock',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  laundryManagerId: 'laundryManagerId'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  receivedDate: 'receivedDate',
  deliveryDate: 'deliveryDate',
  client: 'client',
  address: 'address',
  phone: 'phone',
  total: 'total',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  laundryManagerId: 'laundryManagerId'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  propertyId: 'propertyId',
  agentId: 'agentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  currency: 'currency',
  method: 'method',
  status: 'status',
  propertyId: 'propertyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyPhotoScalarFieldEnum = {
  id: 'id',
  url: 'url',
  type: 'type',
  propertyId: 'propertyId',
  createdAt: 'createdAt'
};

exports.Prisma.CleaningPhotoScalarFieldEnum = {
  id: 'id',
  url: 'url',
  type: 'type',
  cleaningSessionId: 'cleaningSessionId',
  createdAt: 'createdAt'
};

exports.Prisma.MaintenancePhotoScalarFieldEnum = {
  id: 'id',
  url: 'url',
  type: 'type',
  maintenanceSessionId: 'maintenanceSessionId',
  createdAt: 'createdAt'
};

exports.Prisma.SiteCleaningPhotoScalarFieldEnum = {
  id: 'id',
  url: 'url',
  type: 'type',
  siteCleaningSessionId: 'siteCleaningSessionId',
  createdAt: 'createdAt'
};

exports.Prisma.TicketPhotoScalarFieldEnum = {
  id: 'id',
  url: 'url',
  ticketId: 'ticketId',
  createdAt: 'createdAt'
};

exports.Prisma.CleaningChecklistScalarFieldEnum = {
  id: 'id',
  item: 'item',
  completed: 'completed',
  cleaningSessionId: 'cleaningSessionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SiteCleaningChecklistScalarFieldEnum = {
  id: 'id',
  item: 'item',
  completed: 'completed',
  siteCleaningSessionId: 'siteCleaningSessionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CleaningPlanningScalarFieldEnum = {
  id: 'id',
  date: 'date',
  startTime: 'startTime',
  endTime: 'endTime',
  interventionSiteId: 'interventionSiteId',
  cleaningManagerId: 'cleaningManagerId',
  agentId: 'agentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  price: 'price',
  orderId: 'orderId',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeliveryNoteScalarFieldEnum = {
  id: 'id',
  number: 'number',
  date: 'date',
  orderId: 'orderId',
  laundryManagerId: 'laundryManagerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  type: 'type',
  userId: 'userId',
  read: 'read',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.ServiceUserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  status: 'status',
  serviceId: 'serviceId',
  userId: 'userId'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  admin: 'admin',
  user: 'user',
  agent: 'agent'
};

exports.PropertyStatus = exports.$Enums.PropertyStatus = {
  available: 'available',
  occupied: 'occupied',
  maintenance: 'maintenance',
  reserved: 'reserved'
};

exports.AgentType = exports.$Enums.AgentType = {
  cleaning: 'cleaning',
  laundry: 'laundry',
  maintenance: 'maintenance'
};

exports.InterventionStatus = exports.$Enums.InterventionStatus = {
  planned: 'planned',
  in_progress: 'in_progress',
  completed: 'completed',
  cancelled: 'cancelled'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  received: 'received',
  processing: 'processing',
  delivery: 'delivery',
  completed: 'completed',
  returned: 'returned'
};

exports.TicketStatus = exports.$Enums.TicketStatus = {
  open: 'open',
  in_progress: 'in_progress',
  resolved: 'resolved',
  closed: 'closed'
};

exports.ServiceUserStatus = exports.$Enums.ServiceUserStatus = {
  active: 'active',
  inactive: 'inactive'
};

exports.Prisma.ModelName = {
  User: 'User',
  ConciergerieManager: 'ConciergerieManager',
  Task: 'Task',
  Property: 'Property',
  Reservation: 'Reservation',
  Agent: 'Agent',
  MaintenanceSession: 'MaintenanceSession',
  Maintenance: 'Maintenance',
  CleaningSession: 'CleaningSession',
  Cleaning: 'Cleaning',
  CleaningManager: 'CleaningManager',
  InterventionSite: 'InterventionSite',
  SiteCleaningSession: 'SiteCleaningSession',
  LaundryManager: 'LaundryManager',
  Product: 'Product',
  Order: 'Order',
  Ticket: 'Ticket',
  Payment: 'Payment',
  PropertyPhoto: 'PropertyPhoto',
  CleaningPhoto: 'CleaningPhoto',
  MaintenancePhoto: 'MaintenancePhoto',
  SiteCleaningPhoto: 'SiteCleaningPhoto',
  TicketPhoto: 'TicketPhoto',
  CleaningChecklist: 'CleaningChecklist',
  SiteCleaningChecklist: 'SiteCleaningChecklist',
  CleaningPlanning: 'CleaningPlanning',
  OrderItem: 'OrderItem',
  DeliveryNote: 'DeliveryNote',
  Notification: 'Notification',
  Service: 'Service',
  ServiceUser: 'ServiceUser',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
