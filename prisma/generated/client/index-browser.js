
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  avatar: 'avatar',
  role: 'role',
  status: 'status',
  language: 'language',
  timezone: 'timezone',
  emailVerified: 'emailVerified',
  phoneVerified: 'phoneVerified',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SuperAdminProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyName: 'companyName',
  businessNumber: 'businessNumber',
  vatNumber: 'vatNumber',
  billingAddress: 'billingAddress',
  billingCity: 'billingCity',
  billingCountry: 'billingCountry',
  billingPostal: 'billingPostal',
  subscriptionTier: 'subscriptionTier',
  subscriptionStatus: 'subscriptionStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PoleSubscriptionScalarFieldEnum = {
  id: 'id',
  poleType: 'poleType',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  trialEndDate: 'trialEndDate',
  monthlyPrice: 'monthlyPrice',
  lastBillingDate: 'lastBillingDate',
  nextBillingDate: 'nextBillingDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  superAdminId: 'superAdminId'
};

exports.Prisma.PoleManagerProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  poleTypes: 'poleTypes',
  canViewAnalytics: 'canViewAnalytics',
  canManageAgents: 'canManageAgents',
  canManageClients: 'canManageClients',
  canManageBilling: 'canManageBilling',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  superAdminId: 'superAdminId'
};

exports.Prisma.PropertyOwnerProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  company: 'company',
  taxNumber: 'taxNumber',
  address: 'address',
  city: 'city',
  country: 'country',
  postal: 'postal',
  preferredContactMethod: 'preferredContactMethod',
  receiveNotifications: 'receiveNotifications',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LaundryClientProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyName: 'companyName',
  contactPerson: 'contactPerson',
  defaultPickupAddress: 'defaultPickupAddress',
  defaultDeliveryAddress: 'defaultDeliveryAddress',
  preferredPickupTime: 'preferredPickupTime',
  specialInstructions: 'specialInstructions',
  creditLimit: 'creditLimit',
  paymentTerms: 'paymentTerms',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgentProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  agentType: 'agentType',
  availability: 'availability',
  employeeId: 'employeeId',
  certifications: 'certifications',
  currentLocation: 'currentLocation',
  serviceZones: 'serviceZones',
  rating: 'rating',
  completedTasks: 'completedTasks',
  averageRating: 'averageRating',
  responseTime: 'responseTime',
  workingHours: 'workingHours',
  availabilityCalendar: 'availabilityCalendar',
  hourlyRate: 'hourlyRate',
  isActive: 'isActive',
  hireDate: 'hireDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  managerId: 'managerId'
};

exports.Prisma.AgentSpecialtyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  level: 'level',
  certified: 'certified',
  agentId: 'agentId'
};

exports.Prisma.PropertyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  address: 'address',
  city: 'city',
  country: 'country',
  postalCode: 'postalCode',
  latitude: 'latitude',
  longitude: 'longitude',
  surface: 'surface',
  numberOfRooms: 'numberOfRooms',
  numberOfBedrooms: 'numberOfBedrooms',
  numberOfBathrooms: 'numberOfBathrooms',
  maxGuests: 'maxGuests',
  floor: 'floor',
  hasElevator: 'hasElevator',
  hasParking: 'hasParking',
  hasBalcony: 'hasBalcony',
  pricePerNight: 'pricePerNight',
  cleaningFee: 'cleaningFee',
  serviceFee: 'serviceFee',
  securityDeposit: 'securityDeposit',
  averageRating: 'averageRating',
  totalReviews: 'totalReviews',
  checkInTime: 'checkInTime',
  checkOutTime: 'checkOutTime',
  cancellationPolicy: 'cancellationPolicy',
  houseRules: 'houseRules',
  accessInstructions: 'accessInstructions',
  cleaningInstructions: 'cleaningInstructions',
  maintenanceNotes: 'maintenanceNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ownerId: 'ownerId',
  managerId: 'managerId'
};

exports.Prisma.PropertyFeatureScalarFieldEnum = {
  id: 'id',
  name: 'name',
  icon: 'icon',
  category: 'category',
  propertyId: 'propertyId'
};

exports.Prisma.PropertyPhotoScalarFieldEnum = {
  id: 'id',
  url: 'url',
  caption: 'caption',
  isMain: 'isMain',
  order: 'order',
  type: 'type',
  propertyId: 'propertyId',
  createdAt: 'createdAt'
};

exports.Prisma.PropertyReviewScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  comment: 'comment',
  guestName: 'guestName',
  guestEmail: 'guestEmail',
  propertyId: 'propertyId',
  createdAt: 'createdAt'
};

exports.Prisma.ReservationScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  guestName: 'guestName',
  guestEmail: 'guestEmail',
  guestPhone: 'guestPhone',
  guestCount: 'guestCount',
  checkIn: 'checkIn',
  checkOut: 'checkOut',
  nights: 'nights',
  basePrice: 'basePrice',
  cleaningFee: 'cleaningFee',
  serviceFee: 'serviceFee',
  taxes: 'taxes',
  totalPrice: 'totalPrice',
  status: 'status',
  notes: 'notes',
  confirmationCode: 'confirmationCode',
  bookingSource: 'bookingSource',
  checkInTime: 'checkInTime',
  checkOutTime: 'checkOutTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  managerId: 'managerId'
};

exports.Prisma.CleaningSessionScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  agentId: 'agentId',
  scheduledDate: 'scheduledDate',
  startTime: 'startTime',
  endTime: 'endTime',
  duration: 'duration',
  cleaningType: 'cleaningType',
  status: 'status',
  notes: 'notes',
  agentNotes: 'agentNotes',
  ownerRating: 'ownerRating',
  managerRating: 'managerRating',
  feedback: 'feedback',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  managerId: 'managerId'
};

exports.Prisma.CleaningChecklistScalarFieldEnum = {
  id: 'id',
  item: 'item',
  completed: 'completed',
  notes: 'notes',
  order: 'order',
  cleaningSessionId: 'cleaningSessionId'
};

exports.Prisma.CleaningPhotoScalarFieldEnum = {
  id: 'id',
  url: 'url',
  type: 'type',
  caption: 'caption',
  cleaningSessionId: 'cleaningSessionId',
  createdAt: 'createdAt'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  ticketNumber: 'ticketNumber',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  propertyId: 'propertyId',
  reportedBy: 'reportedBy',
  reportedAt: 'reportedAt',
  agentId: 'agentId',
  assignedAt: 'assignedAt',
  category: 'category',
  issueType: 'issueType',
  roomLocation: 'roomLocation',
  resolution: 'resolution',
  resolvedAt: 'resolvedAt',
  estimatedCost: 'estimatedCost',
  estimatedDuration: 'estimatedDuration',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  managerId: 'managerId'
};

exports.Prisma.TicketPhotoScalarFieldEnum = {
  id: 'id',
  url: 'url',
  caption: 'caption',
  ticketId: 'ticketId',
  createdAt: 'createdAt'
};

exports.Prisma.MaintenanceSessionScalarFieldEnum = {
  id: 'id',
  sessionNumber: 'sessionNumber',
  ticketId: 'ticketId',
  propertyId: 'propertyId',
  agentId: 'agentId',
  scheduledDate: 'scheduledDate',
  startTime: 'startTime',
  endTime: 'endTime',
  estimatedDuration: 'estimatedDuration',
  actualDuration: 'actualDuration',
  status: 'status',
  notes: 'notes',
  workDescription: 'workDescription',
  agentNotes: 'agentNotes',
  laborCost: 'laborCost',
  materialsCost: 'materialsCost',
  totalCost: 'totalCost',
  ownerApproval: 'ownerApproval',
  managerApproval: 'managerApproval',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  managerId: 'managerId'
};

exports.Prisma.MaintenanceMaterialScalarFieldEnum = {
  id: 'id',
  name: 'name',
  quantity: 'quantity',
  unit: 'unit',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  supplier: 'supplier',
  maintenanceSessionId: 'maintenanceSessionId'
};

exports.Prisma.MaintenancePhotoScalarFieldEnum = {
  id: 'id',
  url: 'url',
  type: 'type',
  caption: 'caption',
  maintenanceSessionId: 'maintenanceSessionId',
  createdAt: 'createdAt'
};

exports.Prisma.LaundryProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  stock: 'stock',
  category: 'category',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LaundryOrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  status: 'status',
  receivedDate: 'receivedDate',
  processedDate: 'processedDate',
  readyDate: 'readyDate',
  deliveryDate: 'deliveryDate',
  pickupAddress: 'pickupAddress',
  deliveryAddress: 'deliveryAddress',
  instructions: 'instructions',
  subtotal: 'subtotal',
  taxes: 'taxes',
  deliveryFee: 'deliveryFee',
  totalAmount: 'totalAmount',
  notes: 'notes',
  receivedByClient: 'receivedByClient',
  receivedAt: 'receivedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  managerId: 'managerId',
  clientId: 'clientId'
};

exports.Prisma.LaundryOrderItemScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  subtotal: 'subtotal',
  notes: 'notes',
  orderId: 'orderId',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeliveryNoteScalarFieldEnum = {
  id: 'id',
  number: 'number',
  date: 'date',
  notes: 'notes',
  orderId: 'orderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskAssignmentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  priority: 'priority',
  status: 'status',
  assignedAt: 'assignedAt',
  dueDate: 'dueDate',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  agentId: 'agentId',
  propertyId: 'propertyId',
  reservationId: 'reservationId',
  cleaningSessionId: 'cleaningSessionId',
  maintenanceSessionId: 'maintenanceSessionId',
  ticketId: 'ticketId',
  estimatedDuration: 'estimatedDuration',
  actualDuration: 'actualDuration',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyContractScalarFieldEnum = {
  id: 'id',
  contractNumber: 'contractNumber',
  type: 'type',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  propertyId: 'propertyId',
  propertyOwnerId: 'propertyOwnerId',
  monthlyFee: 'monthlyFee',
  commissionRate: 'commissionRate',
  documentUrl: 'documentUrl',
  signedAt: 'signedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SuperAdminInvoiceScalarFieldEnum = {
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  status: 'status',
  issueDate: 'issueDate',
  dueDate: 'dueDate',
  paidAt: 'paidAt',
  subtotal: 'subtotal',
  taxRate: 'taxRate',
  taxAmount: 'taxAmount',
  totalAmount: 'totalAmount',
  paidAmount: 'paidAmount',
  superAdminId: 'superAdminId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SuperAdminInvoiceItemScalarFieldEnum = {
  id: 'id',
  description: 'description',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  poleType: 'poleType',
  invoiceId: 'invoiceId'
};

exports.Prisma.LaundryInvoiceScalarFieldEnum = {
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  status: 'status',
  issueDate: 'issueDate',
  dueDate: 'dueDate',
  paidAt: 'paidAt',
  subtotal: 'subtotal',
  taxRate: 'taxRate',
  taxAmount: 'taxAmount',
  totalAmount: 'totalAmount',
  paidAmount: 'paidAmount',
  clientId: 'clientId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  type: 'type',
  priority: 'priority',
  read: 'read',
  userId: 'userId',
  relatedType: 'relatedType',
  relatedId: 'relatedId',
  actionUrl: 'actionUrl',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  super_admin: 'super_admin',
  pole_manager: 'pole_manager',
  property_owner: 'property_owner',
  laundry_client: 'laundry_client',
  agent: 'agent'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  active: 'active',
  inactive: 'inactive',
  pending: 'pending',
  suspended: 'suspended'
};

exports.PoleType = exports.$Enums.PoleType = {
  conciergerie: 'conciergerie',
  cleaning: 'cleaning',
  maintenance: 'maintenance',
  laundry: 'laundry'
};

exports.PoleStatus = exports.$Enums.PoleStatus = {
  active: 'active',
  inactive: 'inactive',
  trial: 'trial',
  expired: 'expired'
};

exports.AgentType = exports.$Enums.AgentType = {
  cleaning: 'cleaning',
  maintenance: 'maintenance',
  laundry: 'laundry',
  concierge: 'concierge',
  multi_service: 'multi_service'
};

exports.AgentAvailability = exports.$Enums.AgentAvailability = {
  available: 'available',
  busy: 'busy',
  offline: 'offline',
  on_break: 'on_break',
  on_mission: 'on_mission'
};

exports.PropertyStatus = exports.$Enums.PropertyStatus = {
  available: 'available',
  occupied: 'occupied',
  maintenance: 'maintenance',
  reserved: 'reserved',
  offline: 'offline'
};

exports.ReservationStatus = exports.$Enums.ReservationStatus = {
  confirmed: 'confirmed',
  pending: 'pending',
  cancelled: 'cancelled',
  completed: 'completed',
  in_progress: 'in_progress',
  checked_in: 'checked_in',
  checked_out: 'checked_out'
};

exports.SessionStatus = exports.$Enums.SessionStatus = {
  planned: 'planned',
  in_progress: 'in_progress',
  completed: 'completed',
  cancelled: 'cancelled',
  paused: 'paused',
  pending_validation: 'pending_validation'
};

exports.TicketStatus = exports.$Enums.TicketStatus = {
  open: 'open',
  assigned: 'assigned',
  in_progress: 'in_progress',
  resolved: 'resolved',
  closed: 'closed',
  cancelled: 'cancelled'
};

exports.TicketPriority = exports.$Enums.TicketPriority = {
  low: 'low',
  medium: 'medium',
  high: 'high',
  urgent: 'urgent',
  critical: 'critical'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  received: 'received',
  processing: 'processing',
  ready: 'ready',
  pickup_scheduled: 'pickup_scheduled',
  in_delivery: 'in_delivery',
  delivered: 'delivered',
  completed: 'completed',
  cancelled: 'cancelled',
  returned: 'returned'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  info: 'info',
  warning: 'warning',
  error: 'error',
  success: 'success',
  task_assigned: 'task_assigned',
  status_update: 'status_update',
  payment_due: 'payment_due',
  review_request: 'review_request',
  pole_activated: 'pole_activated',
  pole_expired: 'pole_expired'
};

exports.Prisma.ModelName = {
  User: 'User',
  SuperAdminProfile: 'SuperAdminProfile',
  PoleSubscription: 'PoleSubscription',
  PoleManagerProfile: 'PoleManagerProfile',
  PropertyOwnerProfile: 'PropertyOwnerProfile',
  LaundryClientProfile: 'LaundryClientProfile',
  AgentProfile: 'AgentProfile',
  AgentSpecialty: 'AgentSpecialty',
  Property: 'Property',
  PropertyFeature: 'PropertyFeature',
  PropertyPhoto: 'PropertyPhoto',
  PropertyReview: 'PropertyReview',
  Reservation: 'Reservation',
  CleaningSession: 'CleaningSession',
  CleaningChecklist: 'CleaningChecklist',
  CleaningPhoto: 'CleaningPhoto',
  Ticket: 'Ticket',
  TicketPhoto: 'TicketPhoto',
  MaintenanceSession: 'MaintenanceSession',
  MaintenanceMaterial: 'MaintenanceMaterial',
  MaintenancePhoto: 'MaintenancePhoto',
  LaundryProduct: 'LaundryProduct',
  LaundryOrder: 'LaundryOrder',
  LaundryOrderItem: 'LaundryOrderItem',
  DeliveryNote: 'DeliveryNote',
  TaskAssignment: 'TaskAssignment',
  PropertyContract: 'PropertyContract',
  SuperAdminInvoice: 'SuperAdminInvoice',
  SuperAdminInvoiceItem: 'SuperAdminInvoiceItem',
  LaundryInvoice: 'LaundryInvoice',
  Notification: 'Notification',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
