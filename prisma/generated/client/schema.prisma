datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_PRISMA_MIGRATION")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

enum Role {
  admin
  user
  agent
}

// New enums for statuses
enum PropertyStatus {
  available
  occupied
  maintenance
  reserved
}

enum OrderStatus {
  received
  processing
  delivery
  completed
  returned
}

enum TicketStatus {
  open
  in_progress
  resolved
  closed
}

enum InterventionStatus {
  planned
  in_progress
  completed
  cancelled
}

enum ServiceType {
  cleaning
  maintenance
  housekeeping
  laundry
}

model User {
  id   String @id @default(uuid())
  role Role   @default(user)

  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  conciergerieManagers ConciergerieManager[]
  cleaningManagers     CleaningManager[]
  laundryManagers      LaundryManager[]
  notifications        Notification[]
  serviceUsers         ServiceUser[]

  agent Agent[]

  @@unique([email])
  @@map("user")
}

model ConciergerieManager {
  id         String     @id @default(uuid())
  name       String
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime
  updatedAt  DateTime
  properties Property[]
  agents     Agent[]
  tasks      Task[]
}

model Task {
  id                    String               @id @default(uuid())
  name                  String
  description           String
  createdAt             DateTime
  updatedAt             DateTime
  conciergerieManagerId String?
  conciergerieManager   ConciergerieManager? @relation(fields: [conciergerieManagerId], references: [id], onDelete: Cascade)
  agentId               String?
  agent                 Agent?               @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model Property {
  id                    String               @id @default(uuid())
  name                  String
  description           String
  status                PropertyStatus       @default(available)
  location              String?
  surface               Float?
  numberOfRooms         Int?
  numberOfBathrooms     Int?
  createdAt             DateTime
  updatedAt             DateTime
  conciergerieManagerId String
  conciergerieManager   ConciergerieManager  @relation(fields: [conciergerieManagerId], references: [id], onDelete: Cascade)
  cleaningSessions      CleaningSession[]
  maintenanceSessions   MaintenanceSession[]
  reservations          Reservation[]
  payments              Payment[]
  tickets               Ticket[]
  photos                PropertyPhoto[]
}

model Reservation {
  id         String   @id @default(uuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  startDate  DateTime
  endDate    DateTime
  client     String?
  notes      String?
  createdAt  DateTime
  updatedAt  DateTime
}

enum AgentType {
  cleaning
  laundry
  maintenance
}

model Agent {
  id                    String                @id @default(uuid())
  name                  String
  description           String
  createdAt             DateTime
  updatedAt             DateTime
  type                  AgentType             @default(cleaning)
  maintenanceSessions   MaintenanceSession[]
  cleaningSessions      CleaningSession[]
  conciergerieManagerId String
  conciergerieManager   ConciergerieManager   @relation(fields: [conciergerieManagerId], references: [id], onDelete: Cascade)
  tasks                 Task[]
  tickets               Ticket[]
  cleaningPlannings     CleaningPlanning[]
  userId                String
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  siteCleaningSessions  SiteCleaningSession[]
  cleaningManagerId     String?
  cleaningManager       CleaningManager?      @relation(fields: [cleaningManagerId], references: [id], onDelete: Cascade)
}

model MaintenanceSession {
  id            String             @id @default(uuid())
  propertyId    String
  property      Property           @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt     DateTime
  updatedAt     DateTime
  maintenanceId String
  maintenance   Maintenance        @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
  agentId       String
  agent         Agent              @relation(fields: [agentId], references: [id], onDelete: Cascade)
  startDate     DateTime?
  endDate       DateTime?
  notes         String?
  photos        MaintenancePhoto[]
}

model Maintenance {
  id                  String               @id @default(uuid())
  name                String
  description         String
  createdAt           DateTime
  updatedAt           DateTime
  sessionMaintenances MaintenanceSession[]
}

model CleaningSession {
  id         String              @id @default(uuid())
  propertyId String
  property   Property            @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt  DateTime
  updatedAt  DateTime
  cleaningId String
  cleaning   Cleaning            @relation(fields: [cleaningId], references: [id], onDelete: Cascade)
  agentId    String
  agent      Agent               @relation(fields: [agentId], references: [id], onDelete: Cascade)
  startDate  DateTime?
  endDate    DateTime?
  duration   Int? // in minutes
  notes      String?
  photos     CleaningPhoto[]
  checklist  CleaningChecklist[]
}

model Cleaning {
  id               String            @id @default(uuid())
  name             String
  description      String
  createdAt        DateTime
  updatedAt        DateTime
  cleaningSessions CleaningSession[]
}

model CleaningManager {
  id                   String                @id @default(uuid())
  userId               String
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt            DateTime
  updatedAt            DateTime
  interventionSites    InterventionSite[]
  siteCleaningSessions SiteCleaningSession[]
  cleaningAgents       Agent[]
  cleaningPlannings    CleaningPlanning[]
}

model InterventionSite {
  id                   String                @id @default(uuid())
  name                 String
  description          String
  client               String?
  site                 String?
  surface              Float?
  type                 String?
  address              String?
  createdAt            DateTime
  updatedAt            DateTime
  cleaningManagerId    String
  cleaningManager      CleaningManager       @relation(fields: [cleaningManagerId], references: [id], onDelete: Cascade)
  siteCleaningSessions SiteCleaningSession[]
  cleaningPlannings    CleaningPlanning[]
}

model SiteCleaningSession {
  id                 String           @id @default(uuid())
  interventionSiteId String
  interventionSite   InterventionSite @relation(fields: [interventionSiteId], references: [id], onDelete: Cascade)
  createdAt          DateTime
  updatedAt          DateTime
  cleaningManagerId  String
  cleaningManager    CleaningManager  @relation(fields: [cleaningManagerId], references: [id], onDelete: Cascade)

  startDate        DateTime?
  endDate          DateTime?
  duration         Int? // in minutes
  notes            String?
  photos           SiteCleaningPhoto[]
  checklist        SiteCleaningChecklist[]
  status           InterventionStatus      @default(planned)
  laundryManagerId String?
  laundryManager   LaundryManager?         @relation(fields: [laundryManagerId], references: [id], onDelete: Cascade)
  cleaningAgentId  String?
  cleaningAgent    Agent?                  @relation(fields: [cleaningAgentId], references: [id], onDelete: Cascade)
}

model LaundryManager {
  id                   String                @id @default(uuid())
  userId               String
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt            DateTime
  updatedAt            DateTime
  products             Product[]
  orders               Order[]
  deliveryNotes        DeliveryNote[]
  siteCleaningSessions SiteCleaningSession[]
}

model Product {
  id               String         @id @default(uuid())
  name             String
  description      String
  price            Float?
  stock            Int?
  createdAt        DateTime
  updatedAt        DateTime
  orderItems       OrderItem[]
  laundryManagerId String
  laundryManager   LaundryManager @relation(fields: [laundryManagerId], references: [id], onDelete: Cascade)
}

model Order {
  id               String         @id @default(uuid())
  name             String
  description      String
  status           OrderStatus    @default(received)
  receivedDate     DateTime?
  deliveryDate     DateTime?
  client           String?
  address          String?
  phone            String?
  total            Float?
  createdAt        DateTime
  updatedAt        DateTime
  laundryManagerId String
  laundryManager   LaundryManager @relation(fields: [laundryManagerId], references: [id], onDelete: Cascade)
  orderItems       OrderItem[]
  deliveryNotes    DeliveryNote[]
}

// New models for advanced features

model Ticket {
  id          String        @id @default(uuid())
  title       String
  description String
  status      TicketStatus  @default(open)
  priority    String?
  propertyId  String
  property    Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  agentId     String?
  agent       Agent?        @relation(fields: [agentId], references: [id], onDelete: Cascade)
  createdAt   DateTime
  updatedAt   DateTime
  photos      TicketPhoto[]
}

model Payment {
  id         String   @id @default(uuid())
  amount     Float
  currency   String   @default("EUR")
  method     String?
  status     String?
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt  DateTime
  updatedAt  DateTime
}

model PropertyPhoto {
  id         String   @id @default(uuid())
  url        String
  type       String? // before, after, general
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt  DateTime
}

model CleaningPhoto {
  id                String          @id @default(uuid())
  url               String
  type              String? // before, after
  cleaningSessionId String
  cleaningSession   CleaningSession @relation(fields: [cleaningSessionId], references: [id], onDelete: Cascade)
  createdAt         DateTime
}

model MaintenancePhoto {
  id                   String             @id @default(uuid())
  url                  String
  type                 String? // before, after, problem
  maintenanceSessionId String
  maintenanceSession   MaintenanceSession @relation(fields: [maintenanceSessionId], references: [id], onDelete: Cascade)
  createdAt            DateTime
}

model SiteCleaningPhoto {
  id                    String              @id @default(uuid())
  url                   String
  type                  String? // before, after
  siteCleaningSessionId String
  siteCleaningSession   SiteCleaningSession @relation(fields: [siteCleaningSessionId], references: [id], onDelete: Cascade)
  createdAt             DateTime
}

model TicketPhoto {
  id        String   @id @default(uuid())
  url       String
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  createdAt DateTime
}

model CleaningChecklist {
  id                String          @id @default(uuid())
  item              String
  completed         Boolean         @default(false)
  cleaningSessionId String
  cleaningSession   CleaningSession @relation(fields: [cleaningSessionId], references: [id], onDelete: Cascade)
  createdAt         DateTime
  updatedAt         DateTime
}

model SiteCleaningChecklist {
  id                    String              @id @default(uuid())
  item                  String
  completed             Boolean             @default(false)
  siteCleaningSessionId String
  siteCleaningSession   SiteCleaningSession @relation(fields: [siteCleaningSessionId], references: [id], onDelete: Cascade)
  createdAt             DateTime
  updatedAt             DateTime
}

model CleaningPlanning {
  id                 String           @id @default(uuid())
  date               DateTime
  startTime          String?
  endTime            String?
  interventionSiteId String
  interventionSite   InterventionSite @relation(fields: [interventionSiteId], references: [id], onDelete: Cascade)
  cleaningManagerId  String
  cleaningManager    CleaningManager  @relation(fields: [cleaningManagerId], references: [id], onDelete: Cascade)
  agentId            String?
  agent              Agent?           @relation(fields: [agentId], references: [id], onDelete: Cascade)
  createdAt          DateTime
  updatedAt          DateTime
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  price     Float?
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime
  updatedAt DateTime
}

model DeliveryNote {
  id               String         @id @default(uuid())
  number           String
  date             DateTime
  orderId          String
  order            Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  laundryManagerId String
  laundryManager   LaundryManager @relation(fields: [laundryManagerId], references: [id], onDelete: Cascade)
  createdAt        DateTime
  updatedAt        DateTime
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  type      String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  read      Boolean  @default(false)
  createdAt DateTime
}

model Service {
  id          String        @id @default(uuid())
  name        String
  description String
  users       ServiceUser[]
}

model ServiceUser {
  id        String            @id @default(uuid())
  name      String
  status    ServiceUserStatus @default(active)
  serviceId String
  userId    String
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  service   Service           @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

enum ServiceUserStatus {
  active
  inactive
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
